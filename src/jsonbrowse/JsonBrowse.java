/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package jsonbrowse;

import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.Iterator;
import javax.swing.event.TreeModelListener;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;

/**
 * @author Tim Vaughan <tgvaughan@gmail.com>
 */
public class JsonBrowse extends javax.swing.JFrame {

    /**
     * Creates new form JsonBrowseApp
     * 
     * @param rootNode Root JsonNode.
     */
    public JsonBrowse(JsonNode rootNode) {
        initComponents();
        
        jTree.setModel(new JsonTreeModel(rootNode));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane = new javax.swing.JScrollPane();
        jTree = new javax.swing.JTree();
        jButtonQuit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane.setViewportView(jTree);

        jButtonQuit.setText("Quit");
        jButtonQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonQuitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jButtonQuit))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButtonQuit))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonQuitActionPerformed
        setVisible(false);
        System.exit(0);
    }//GEN-LAST:event_jButtonQuitActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(JsonBrowse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(JsonBrowse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(JsonBrowse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(JsonBrowse.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        // Read in JSON file
        if (args.length<1) {
            System.out.println("Usage: JsonBrowse file.json");
            System.exit(0);
        }
        
        ObjectMapper mapper = new ObjectMapper();
        JsonNode rootNode;

        try {
            rootNode = mapper.readTree(new FileInputStream(args[0]));
            JsonBrowse app = new JsonBrowse(rootNode);
            app.setVisible(true);
        } catch (FileNotFoundException ex) {
            System.out.println("Input file '" + args[0] + "' not found.");
            System.exit(1);
        } catch (IOException ex) {
            System.out.println("Error reading from file '" + args[0] + "'.");
            System.exit(1);
        }
    }
    
    public class JsonTreeModel implements TreeModel {

        JsonNode rootNode;
        
        public JsonTreeModel(JsonNode rootNode) {
            this.rootNode = rootNode;
        }
        
        @Override
        public Object getRoot() {
            return rootNode;
        }

        @Override
        public Object getChild(Object parent, int index) {
            JsonNode jnode = (JsonNode)parent;
            return jnode.get(index);
        }

        @Override
        public int getChildCount(Object parent) {
            JsonNode jnode = (JsonNode)parent;
            return jnode.size();
        }

        @Override
        public boolean isLeaf(Object node) {
            JsonNode jnode = (JsonNode)node;
            return jnode.size() == 0;
        }

        @Override
        public void valueForPathChanged(TreePath path, Object newValue) {
        }

        @Override
        public int getIndexOfChild(Object parent, Object child) {
            
            JsonNode jparent = (JsonNode)parent;
            JsonNode jchild = (JsonNode)child;
            
            int i=0;
            Iterator<JsonNode> it = jparent.elements();
            while (it.hasNext()) {
                JsonNode thisChild = it.next();
                if (jchild.equals(thisChild))
                    break;
                i += 1;
            }
            if (i<jparent.size())
                return i;
            else
                return -1;
        }

        @Override
        public void addTreeModelListener(TreeModelListener l) {
        }

        @Override
        public void removeTreeModelListener(TreeModelListener l) {
        }
        
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonQuit;
    private javax.swing.JScrollPane jScrollPane;
    private javax.swing.JTree jTree;
    // End of variables declaration//GEN-END:variables
}
